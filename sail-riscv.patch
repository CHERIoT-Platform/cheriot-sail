diff --git a/c_emulator/riscv_config.h b/c_emulator/riscv_config.h
index f8f3eb3..dcbb32d 100644
--- a/c_emulator/riscv_config.h
+++ b/c_emulator/riscv_config.h
@@ -5,3 +5,4 @@ extern bool config_print_instr;
 extern bool config_print_reg;
 extern bool config_print_mem_access;
 extern bool config_print_platform;
+extern bool config_print_exception;
diff --git a/c_emulator/riscv_platform.c b/c_emulator/riscv_platform.c
index 2572dbc..7a257fc 100644
--- a/c_emulator/riscv_platform.c
+++ b/c_emulator/riscv_platform.c
@@ -58,6 +58,13 @@ mach_bits plat_clint_base(unit u)
 mach_bits plat_clint_size(unit u)
 { return rv_clint_size; }
 
+mach_bits plat_uart_base(unit u)
+{ return rv_uart_base; }
+
+mach_bits plat_uart_size(unit u)
+{ return rv_uart_size; }
+
+
 unit load_reservation(mach_bits addr)
 {
   reservation = addr;
diff --git a/c_emulator/riscv_platform.h b/c_emulator/riscv_platform.h
index 5335a90..a9b98bb 100644
--- a/c_emulator/riscv_platform.h
+++ b/c_emulator/riscv_platform.h
@@ -25,6 +25,9 @@ mach_bits plat_get_16_random_bits();
 mach_bits plat_clint_base(unit);
 mach_bits plat_clint_size(unit);
 
+mach_bits plat_uart_base(unit);
+mach_bits plat_uart_size(unit);
+
 bool speculate_conditional(unit);
 unit load_reservation(mach_bits);
 bool match_reservation(mach_bits);
diff --git a/c_emulator/riscv_platform_impl.c b/c_emulator/riscv_platform_impl.c
index b1504a7..e554d09 100644
--- a/c_emulator/riscv_platform_impl.c
+++ b/c_emulator/riscv_platform_impl.c
@@ -37,13 +37,22 @@ uint64_t rv_16_random_bits(void) {
 uint64_t rv_clint_base = UINT64_C(0x2000000);
 uint64_t rv_clint_size = UINT64_C(0xc0000);
 
+uint64_t rv_uart_base = UINT64_C(0x10000000);
+uint64_t rv_uart_size = UINT64_C(0x100);
+
 uint64_t rv_htif_tohost = UINT64_C(0x80001000);
 uint64_t rv_insns_per_tick = UINT64_C(100);
 
 int term_fd = 1; // set during startup
+extern bool have_newline;
 void plat_term_write_impl(char c)
 {
   if (write(term_fd, &c, sizeof(c)) < 0) {
     fprintf(stderr, "Unable to write to terminal!\n");
   }
+  /* Trace output always goes to stdout. If the terminal is also going to stdout
+   * we try to separate them by inserting new lines before trace output when
+   * necessary (see riscv_prelude.c). */
+  if (term_fd == 1)
+    have_newline = c == '\n';
 }
diff --git a/c_emulator/riscv_platform_impl.h b/c_emulator/riscv_platform_impl.h
index 165fb94..34edd1e 100644
--- a/c_emulator/riscv_platform_impl.h
+++ b/c_emulator/riscv_platform_impl.h
@@ -29,6 +29,9 @@ extern uint64_t rv_16_random_bits(void);
 extern uint64_t rv_clint_base;
 extern uint64_t rv_clint_size;
 
+extern uint64_t rv_uart_base;
+extern uint64_t rv_uart_size;
+
 extern uint64_t rv_htif_tohost;
 extern uint64_t rv_insns_per_tick;
 
diff --git a/c_emulator/riscv_prelude.c b/c_emulator/riscv_prelude.c
index 92f8415..2235ba0 100644
--- a/c_emulator/riscv_prelude.c
+++ b/c_emulator/riscv_prelude.c
@@ -1,33 +1,53 @@
 #include "riscv_prelude.h"
 #include "riscv_config.h"
 
+/* Attempt to keep track of whether output is at the start of a line so that we
+ * can produce nicer output if trace output interrupts terminal output. */
+bool have_newline = true;
+
+void ensure_newline()
+{
+  if (!have_newline)
+    putchar('\n');
+}
+
 unit print_string(sail_string prefix, sail_string msg)
 {
+  ensure_newline();
   printf("%s%s\n", prefix, msg);
+  have_newline = true;
   return UNIT;
 }
 
 unit print_instr(sail_string s)
 {
+  ensure_newline();
   if (config_print_instr) printf("%s\n", s);
+  have_newline = true;
   return UNIT;
 }
 
 unit print_reg(sail_string s)
 {
+  ensure_newline();
   if (config_print_reg) printf("%s\n", s);
+  have_newline = true;
   return UNIT;
 }
 
 unit print_mem_access(sail_string s)
 {
+  ensure_newline();
   if (config_print_mem_access) printf("%s\n", s);
+  have_newline = true;
   return UNIT;
 }
 
 unit print_platform(sail_string s)
 {
+  ensure_newline();
   if (config_print_platform) printf("%s\n", s);
+  have_newline = true;
   return UNIT;
 }
 
@@ -50,3 +70,8 @@ bool get_config_print_platform(unit u)
 {
   return (config_print_platform) ? true : false;
 }
+
+bool get_config_print_exception(unit u)
+{
+  return (config_print_exception) ? true : false;
+}
\ No newline at end of file
diff --git a/c_emulator/riscv_prelude.h b/c_emulator/riscv_prelude.h
index 9ac33aa..84a4090 100644
--- a/c_emulator/riscv_prelude.h
+++ b/c_emulator/riscv_prelude.h
@@ -9,8 +9,10 @@ unit print_instr(sail_string s);
 unit print_reg(sail_string s);
 unit print_mem_access(sail_string s);
 unit print_platform(sail_string s);
+unit print_exception(sail_string s);
 
 bool get_config_print_instr(unit u);
 bool get_config_print_reg(unit u);
 bool get_config_print_mem(unit u);
 bool get_config_print_platform(unit u);
+bool get_config_print_exception(unit u);
\ No newline at end of file
diff --git a/c_emulator/riscv_sim.c b/c_emulator/riscv_sim.c
index 5ad83e9..4bcff94 100644
--- a/c_emulator/riscv_sim.c
+++ b/c_emulator/riscv_sim.c
@@ -71,11 +71,19 @@ uint64_t mem_sig_start = 0;
 uint64_t mem_sig_end = 0;
 int signature_granularity = 4;
 
-bool config_print_instr = true;
-bool config_print_reg = true;
-bool config_print_mem_access = true;
-bool config_print_platform = true;
+bool config_print_instr = false;
+bool config_print_reg = false;
+bool config_print_mem_access = false;
+bool config_print_platform = false;
 bool config_print_rvfi = false;
+bool config_print_exception = false;
+int config_use_boot_rom = 
+#ifdef NO_BOOT_ROM
+false
+#else
+true
+#endif
+;
 
 void set_config_print(char *var, bool val) {
   if (var == NULL || strcmp("all", var) == 0) {
@@ -84,6 +92,7 @@ void set_config_print(char *var, bool val) {
     config_print_reg = val;
     config_print_platform = val;
     config_print_rvfi = val;
+    config_print_exception = val;
   } else if (strcmp("instr", var) == 0) {
     config_print_instr = val;
   } else if (strcmp("reg", var) == 0) {
@@ -94,8 +103,10 @@ void set_config_print(char *var, bool val) {
     config_print_rvfi = val;
   } else if (strcmp("platform", var) == 0) {
     config_print_platform = val;
+  } else if (strcmp("exception", var) == 0) {
+    config_print_exception = val;
   } else {
-    fprintf(stderr, "Unknown trace category: '%s' (should be instr|reg|mem|platform|all)\n", var);
+    fprintf(stderr, "Unknown trace category: '%s' (should be instr|reg|mem|exception|platform|all)\n", var);
     exit(1);
   }
 }
@@ -131,6 +142,8 @@ static struct option options[] = {
   {"no-trace",                    optional_argument, 0, 'V'},
   {"inst-limit",                  required_argument, 0, 'l'},
   {"enable-zfinx",                no_argument,       0, 'x'},
+  {"boot-rom",                    no_argument, &config_use_boot_rom, true},
+  {"no-boot-rom",                 no_argument, &config_use_boot_rom, false},
 #ifdef SAILCOV
   {"sailcov-file",                required_argument, 0, 'c'},
 #endif
@@ -146,7 +159,10 @@ static void print_usage(const char *argv0, int ec)
 #endif
   struct option *opt = options;
   while (opt->name) {
-    fprintf(stdout, "\t -%c\t --%s\n", (char)opt->val, opt->name);
+    if (opt->flag == NULL)
+      fprintf(stdout, "\t -%c\t --%s\n", (char)opt->val, opt->name);
+    else
+      fprintf(stdout, "\t\t --%s\n", opt->name);
     opt++;
   }
   exit(ec);
@@ -551,7 +567,11 @@ void init_sail(uint64_t elf_entry)
     zPC = elf_entry;
   } else
 #endif
-  init_sail_reset_vector(elf_entry);
+  if (config_use_boot_rom) {
+    init_sail_reset_vector(elf_entry);
+  } else {
+    zPC = elf_entry;
+  }
 
   // this is probably unnecessary now; remove
   if (!rv_enable_rvc) z_set_Misa_C(&zmisa, 0);
@@ -944,7 +964,7 @@ void run_sail(void)
   if (diverged) {
     /* TODO */
   }
-  finish(diverged);
+  finish(diverged | zhtif_exit_code);
 
  step_exception:
   fprintf(stderr, "Sail exception!");
diff --git a/model/prelude.sail b/model/prelude.sail
index 6e6718b..29646e2 100644
--- a/model/prelude.sail
+++ b/model/prelude.sail
@@ -175,6 +175,7 @@ val print_platform = {ocaml: "Platform.print_platform", interpreter: "print_endl
 val get_config_print_instr = {ocaml: "Platform.get_config_print_instr", c:"get_config_print_instr"} : unit -> bool
 val get_config_print_reg = {ocaml: "Platform.get_config_print_reg", c:"get_config_print_reg"} : unit -> bool
 val get_config_print_mem = {ocaml: "Platform.get_config_print_mem", c:"get_config_print_mem"} : unit -> bool
+val get_config_print_exception = {ocaml: "Platform.get_config_print_exception", c:"get_config_print_exception"} : unit -> bool
 
 val get_config_print_platform = {ocaml: "Platform.get_config_print_platform", c:"get_config_print_platform"} : unit -> bool
 // defaults for other backends
@@ -182,6 +183,7 @@ function get_config_print_instr () = false
 function get_config_print_reg () = false
 function get_config_print_mem () = false
 function get_config_print_platform () = false
+function get_config_print_exception () = false
 
 val EXTS : forall 'n 'm, 'm >= 'n. (implicit('m), bits('n)) -> bits('m)
 val EXTZ : forall 'n 'm, 'm >= 'n. (implicit('m), bits('n)) -> bits('m)
diff --git a/model/riscv_platform.sail b/model/riscv_platform.sail
index ea27f48..eb8946d 100644
--- a/model/riscv_platform.sail
+++ b/model/riscv_platform.sail
@@ -124,6 +124,10 @@ val plat_rom_size   = {ocaml: "Platform.rom_size", interpreter: "Platform.rom_si
 val plat_clint_base = {ocaml: "Platform.clint_base", interpreter: "Platform.clint_base", c: "plat_clint_base", lem: "plat_clint_base"} : unit -> xlenbits
 val plat_clint_size = {ocaml: "Platform.clint_size", interpreter: "Platform.clint_size", c: "plat_clint_size", lem: "plat_clint_size"} : unit -> xlenbits
 
+/* Location of UART, which should match with the spec in the DTB */
+val plat_uart_base = {ocaml: "Platform.uart_base", interpreter: "Platform.uart_base", c: "plat_uart_base", lem: "plat_uart_base"} : unit -> xlenbits
+val plat_uart_size = {ocaml: "Platform.uart_size", interpreter: "Platform.uart_size", c: "plat_uart_size", lem: "plat_uart_size"} : unit -> xlenbits
+
 /* Location of HTIF ports */
 val plat_htif_tohost = {ocaml: "Platform.htif_tohost", c: "plat_htif_tohost", lem: "plat_htif_tohost"} : unit -> xlenbits
 function plat_htif_tohost () = to_bits(sizeof(xlen), elf_tohost ())
@@ -183,6 +187,18 @@ function within_htif_writable forall 'n, 0 < 'n <= max_mem_access . (addr : xlen
 function within_htif_readable forall 'n, 0 < 'n <= max_mem_access . (addr : xlenbits, width : atom('n)) -> bool =
     plat_htif_tohost() == addr | (plat_htif_tohost() + 4 == addr & width == 4)
 
+function within_uart forall 'n, 0 < 'n <= max_mem_access . (addr : xlenbits, width : atom('n)) -> bool = {
+  /* To avoid overflow issues when physical memory extends to the end
+   * of the addressable range, we need to perform address bound checks
+   * on unsigned unbounded integers.
+   */
+  let addr_int      = unsigned(addr);
+  let uart_base_int = unsigned(plat_uart_base());
+  let uart_size_int = unsigned(plat_uart_size());
+    uart_base_int <= addr_int
+  & (addr_int + sizeof('n)) <= (uart_base_int + uart_size_int)
+}
+
 /* CLINT (Core Local Interruptor), based on Spike. */
 
 val plat_insns_per_tick = {ocaml: "Platform.insns_per_tick", interpreter: "Platform.insns_per_tick", c: "plat_insns_per_tick", lem: "plat_insns_per_tick"} : unit -> int
@@ -452,20 +468,77 @@ function htif_tick() = {
 /* Top-level MMIO dispatch */
 $ifndef RVFI_DII
 function within_mmio_readable forall 'n, 0 < 'n <= max_mem_access . (addr : xlenbits, width : atom('n)) -> bool =
-  within_clint(addr, width) | (within_htif_readable(addr, width) & 1 <= 'n)
+  within_uart (addr, width) | within_clint(addr, width) | (within_htif_readable(addr, width) & 1 <= 'n)
 $else
 function within_mmio_readable forall 'n, 0 < 'n <= max_mem_access . (addr : xlenbits, width : atom('n)) -> bool = false
 $endif
 
 $ifndef RVFI_DII
 function within_mmio_writable forall 'n, 0 < 'n <= max_mem_access . (addr : xlenbits, width : atom('n)) -> bool =
-  within_clint(addr, width) | (within_htif_writable(addr, width) & 'n <= 8)
+  within_uart (addr, width) | within_clint(addr, width) | (within_htif_writable(addr, width) & 'n <= 8)
 $else
 function within_mmio_writable forall 'n, 0 < 'n <= max_mem_access . (addr : xlenbits, width : atom('n)) -> bool = false
 $endif
 
+/* This is a very minimal UART implementation: just enough to allow a basic
+driver to output to the console. It ignores the configuration registers and
+does not supporting reading except from the line status register which indictes
+it is always ready to transmit. Does not support interrupts. */
+
+let UART_OFFSET_DATA    = 0x00000000
+let UART_OFFSET_LINE_CTL = 0x0000000c
+let UART_OFFSET_LINE_STATUS = 0x00000014
+/* Divisor latch access bit. We need this so that we can ignore writes to data
+  register while the driver programs the baud rate (otherwise we might print
+  garbage on console). */
+register UART_DLAB : bit = bitzero
+
+val uart_load : forall 'n, 'n > 0. (AccessType(ext_access_type), xlenbits, int('n)) -> MemoryOpResult(bits(8 * 'n))
+function uart_load(t, addr, width) = {
+  let offset = addr - plat_uart_base();
+  /* We only support reading the status register, which always indicates ready to write output */
+  if offset == UART_OFFSET_LINE_STATUS & ('n == 4)
+  then {
+    let result = 0b100000; /* TXBufEmpty always */
+    if   get_config_print_platform()
+    then print_platform("uart[" ^ BitStr(offset) ^ "] -> " ^ BitStr(result));
+    MemValue(sail_zero_extend(result, sizeof(8 * 'n)))
+  } else {
+    if   get_config_print_platform()
+    then print_platform("uart[" ^ BitStr(offset) ^ "] -> <not-mapped>");
+    match t {
+      Execute()  => MemException(E_Fetch_Access_Fault()),
+      Read(Data) => MemException(E_Load_Access_Fault()),
+      _          => MemException(E_SAMO_Access_Fault())
+    }
+  }
+}
+
+val uart_store: forall 'n, 'n > 0. (xlenbits, int('n), bits(8 * 'n)) -> MemoryOpResult(bool)
+function uart_store(addr, width, data) = {
+  let offset = addr - plat_uart_base();
+  /* only support writing to the data register for output, ignore other writes */
+  if offset == UART_OFFSET_DATA & ('n == 8 | 'n == 4) then {
+    if   get_config_print_platform()
+    then print_platform("uart[" ^ BitStr(offset) ^ "] <- " ^ BitStr(data));
+    if UART_DLAB == bitzero then plat_term_write(data[7..0]);
+    MemValue(true)
+  } else if offset == UART_OFFSET_LINE_CTL & ('n == 8 | 'n == 4) then {
+    if   get_config_print_platform()
+    then print_platform("uart[" ^ BitStr(offset) ^ "] <- " ^ BitStr(data));
+    UART_DLAB = data[7];
+    MemValue(true)
+  } else {
+    if   get_config_print_platform()
+    then print_platform("uart[" ^ BitStr(offset) ^ "] <- " ^ BitStr(data) ^ " (<ignored>)");
+    MemValue(true)
+  }
+}
+
 function mmio_read forall 'n, 0 < 'n <= max_mem_access . (t : AccessType(ext_access_type), paddr : xlenbits, width : atom('n)) -> MemoryOpResult(bits(8 * 'n)) =
-  if   within_clint(paddr, width)
+  if   within_uart(paddr, width)
+  then uart_load(t, paddr, width)
+  else if within_clint(paddr, width)
   then clint_load(t, paddr, width)
   else if within_htif_readable(paddr, width) & (1 <= 'n)
   then htif_load(t, paddr, width)
@@ -476,7 +549,9 @@ function mmio_read forall 'n, 0 < 'n <= max_mem_access . (t : AccessType(ext_acc
   }
 
 function mmio_write forall 'n, 0 <'n <= max_mem_access . (paddr : xlenbits, width : atom('n), data: bits(8 * 'n)) -> MemoryOpResult(bool) =
-  if   within_clint(paddr, width)
+  if   within_uart(paddr, width)
+  then uart_store(paddr, width, data)
+  else if within_clint(paddr, width)
   then clint_store(paddr, width, data)
   else if within_htif_writable(paddr, width) & 'n <= 8
   then htif_store(paddr, width, data)
diff --git a/model/riscv_regs.sail b/model/riscv_regs.sail
index a65c6c5..d9ef101 100644
--- a/model/riscv_regs.sail
+++ b/model/riscv_regs.sail
@@ -128,22 +128,6 @@ function rX r = {
       13 => x13,
       14 => x14,
       15 => x15,
-      16 => x16,
-      17 => x17,
-      18 => x18,
-      19 => x19,
-      20 => x20,
-      21 => x21,
-      22 => x22,
-      23 => x23,
-      24 => x24,
-      25 => x25,
-      26 => x26,
-      27 => x27,
-      28 => x28,
-      29 => x29,
-      30 => x30,
-      31 => x31,
       _  => {assert(false, "invalid register number"); zero_reg}
     };
   regval_from_reg(v)
@@ -181,22 +165,6 @@ function wX (r, in_v) = {
     13 => x13 = v,
     14 => x14 = v,
     15 => x15 = v,
-    16 => x16 = v,
-    17 => x17 = v,
-    18 => x18 = v,
-    19 => x19 = v,
-    20 => x20 = v,
-    21 => x21 = v,
-    22 => x22 = v,
-    23 => x23 = v,
-    24 => x24 = v,
-    25 => x25 = v,
-    26 => x26 = v,
-    27 => x27 = v,
-    28 => x28 = v,
-    29 => x29 = v,
-    30 => x30 = v,
-    31 => x31 = v,
     _  => assert(false, "invalid register number")
   };
   if (r != 0) then {
diff --git a/model/riscv_step.sail b/model/riscv_step.sail
index df53fae..d60bf8e 100644
--- a/model/riscv_step.sail
+++ b/model/riscv_step.sail
@@ -77,8 +77,8 @@ function step(step_no : int) -> bool = {
   let (retired, stepped) : (Retired, bool) =
     match dispatchInterrupt(cur_privilege) {
       Some(intr, priv) => {
-        if   get_config_print_instr()
-        then print_bits("Handling interrupt: ", interruptType_to_bits(intr));
+        if get_config_print_instr() | get_config_print_exception()
+        then print("Handling interrupt PC=" ^ BitStr(PC) ^ " IRQ=" ^ BitStr(interruptType_to_bits(intr)));
         handle_interrupt(intr, priv);
         (RETIRE_FAIL, false)
       },
diff --git a/model/riscv_sys_control.sail b/model/riscv_sys_control.sail
index 6204ae5..54a8daf 100644
--- a/model/riscv_sys_control.sail
+++ b/model/riscv_sys_control.sail
@@ -341,10 +341,14 @@ function dispatchInterrupt(priv : Privilege) -> option((InterruptType, Privilege
    */
   if (~ (haveUsrMode())) | ((~ (haveSupMode())) & (~ (haveNExt()))) then {
     assert(priv == Machine, "invalid current privilege");
-    let enabled_pending = mip.bits() & mie.bits();
-    match findPendingInterrupt(enabled_pending) {
-      Some(i) => let r = (i, Machine) in Some(r),
-      None()  => None()
+    if mstatus.MIE() == 0b1 then {
+      let enabled_pending = mip.bits() & mie.bits();
+      match findPendingInterrupt(enabled_pending) {
+        Some(i) => let r = (i, Machine) in Some(r),
+        None()  => None()
+      }
+    } else {
+      None()
     }
   } else {
     match getPendingSet(priv) {
@@ -552,12 +556,13 @@ function init_sys() -> unit = {
   mhartid     = EXTZ(0b0);
 
   misa->MXL() = arch_to_bits(if sizeof(xlen) == 32 then RV32 else RV64);
-  misa->A()   = 0b1;                            /* atomics */
+  // misa->A()   = 0b1;                            /* atomics */
   misa->C()   = bool_to_bits(sys_enable_rvc()); /* RVC */
-  misa->I()   = 0b1;                            /* base integer ISA */
+  // misa->I()   = 0b1;                            /* base integer ISA */
+  misa->E()   = 0b1;
   misa->M()   = 0b1;                            /* integer multiply/divide */
-  misa->U()   = 0b1;                            /* user-mode */
-  misa->S()   = 0b1;                            /* supervisor-mode */
+  misa->U()   = 0b0;                            /* user-mode */
+  misa->S()   = 0b0;                            /* supervisor-mode */
 
   if   sys_enable_fdext() & sys_enable_zfinx()
   then internal_error("F and Zfinx cannot both be enabled!");
